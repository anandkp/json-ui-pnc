{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","formData","job_parameters","pncStudy","pncMockInputTable","cohortGroup","job_information","submitted_timestamp","Date","toISOString","App","event","OutputJSON","console","log","startDate","datestring","toString","parts","startDateUTC","UTC","OutputJSONStr","JSON","stringify","document","getElementById","innerText","react_default","a","createElement","lib_default","schema","pncschema","uiSchema","pncuiSchema","onSubmit","this","handleSubmit","onChange","handleChange","liveValidate","Component","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2ijBAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iHCFAC,EAAW,CACfC,eAAgB,CACdC,SAAU,CACRC,kBAAmB,GACnBC,YAAa,KAKjBC,gBAAiB,CACfC,qBAAqB,IAAIC,MAAOC,gBAe9BC,uLAMSC,yCAwBAA,GACX,IAAMC,EAAaD,EAAMV,SACzBY,QAAQC,IAAI,qBAAoBF,EAAWV,eAAeC,SAASE,YAAYU,WAG7E,IAAMC,EAAcJ,EAAWV,eAAeC,SAASE,YAAYU,UAAWE,WAGxEC,EAASF,EAAWhB,MAAM,UAEhCa,QAAQC,IAAI,gBAAeI,GAE3B,IAAMC,EAAeX,KAAKY,KAAKF,EAAM,GAAIA,EAAM,GAAG,GAAIA,EAAM,GAAI,EAAO,GAEvEN,EAAWV,eAAeC,SAASE,YAAYU,UAAYI,EAE3D,IAAME,EAAgBC,KAAKC,UAAUX,GACrCY,SAASC,eAAe,WAAWC,UAAYL,EAE/CT,EAAWV,eAAeC,SAASE,YAAYU,UAAYC,mCAI7D,OACEW,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,OAAQC,EACRC,SAAUC,EACVC,SAAUC,KAAKC,aACfpC,SAAUA,EACVqC,SAAUF,KAAKG,aACfC,cAAY,YA7DJC,aAsElBC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASpB,SAASC,eAAe,SDkB3C,kBAAmBoB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.15669260.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n//import React, { Component } from \"react\";\n//import { render } from \"react-dom\";\n\nimport Form from \"react-jsonschema-form\";\n//import pncschema from \"./schema.1.json\";\nimport pncschema from \"./schema.json\";\nimport pncuiSchema from \"./uiSchema.json\";\n//import axios from \"axios\"\n\n//let OutputJSONStr = '';\nconst formData = {\n  job_parameters: {\n    pncStudy: {\n      pncMockInputTable: \"\",\n      cohortGroup: {\n        // startDate: \"2017-02-01\"\n      }\n    }\n  },\n  job_information: {\n    submitted_timestamp: new Date().toISOString()\n  }\n};\n\n\n\n//export default Output;\n// const onSubmit = ({ formData }) => {\n//   console.log(\"Data submitted: \", formData);\n//   //saveAs(formData, filename+\".txt\");\n//   // fs.writeFileSync('student-2.json', JSON.stringify(formData));\n// };\n\n\n\nclass App extends Component {\n  \n \n\n  \n\n  handleSubmit(event) {\n    // // OutputJSON = JSON.stringify(event.formData);\n    // //console.log(formData);\n    // // console.log(OutputJSON);\n    // // document.getElementById(\"outJson\").innerText = OutputJSON;\n\n    // //event.preventDefault();\n\n    // const auth = {\n    //   \"username\" : \"ppspusr\",\n    //   \"password\" : \"Ppsprod1\"\n    // };\n\n    // // const headers = {\n    // //   'Access-Control-Allow-Origin': '*',\n    // //   'Content-Type': 'application/json'\n    // // }\n\n    // axios.post('http://cdts99hdfe04p.rxcorp.com:3993/submitFtpaReportRequest', { auth })\n    //   .then(res => {\n    //     console.log(res);\n    //     console.log(res.data);\n    //   })\n  }\n  handleChange(event){\n    const OutputJSON = event.formData;\n    console.log(\"OutputJSON --> \" + OutputJSON.job_parameters.pncStudy.cohortGroup.startDate)\n    \n\n      const datestring = (OutputJSON.job_parameters.pncStudy.cohortGroup.startDate).toString()     \n     \n     \n      const parts =  datestring.match(/(\\d+)/g);\n\n      console.log(\"parts --> \" + parts);\n      \n      const startDateUTC = Date.UTC(+parts[0], parts[1]-1, +parts[2], +\"00\", +\"00\");\n\n      OutputJSON.job_parameters.pncStudy.cohortGroup.startDate = startDateUTC;\n\n      const OutputJSONStr = JSON.stringify(OutputJSON);\n      document.getElementById(\"outJson\").innerText = OutputJSONStr;\n      \n      OutputJSON.job_parameters.pncStudy.cohortGroup.startDate = datestring;\n    \n  }\n  render() {\n    return (\n      <div>\n        <Form \n          schema={pncschema}\n          uiSchema={pncuiSchema}\n          onSubmit={this.handleSubmit}\n          formData={formData}\n          onChange={this.handleChange}\n          liveValidate          \n        />  \n      </div>\n    );\n  }\n}\n\n//export default App;\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}